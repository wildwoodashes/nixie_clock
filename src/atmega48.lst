
atmega48.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002e  00800100  00800100  00000ab2  2**0
                  ALLOC
  2 .eeprom       00000014  00810000  00810000  00000ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000060  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002c1  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac2  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000467  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c9d  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000534  00000000  00000000  00003011  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2b c0       	rjmp	.+86     	; 0x58 <__ctors_end>
   2:	45 c0       	rjmp	.+138    	; 0x8e <__bad_interrupt>
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	43 c0       	rjmp	.+134    	; 0x8e <__bad_interrupt>
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	41 c0       	rjmp	.+130    	; 0x8e <__bad_interrupt>
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	3f c0       	rjmp	.+126    	; 0x8e <__bad_interrupt>
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	3d c0       	rjmp	.+122    	; 0x8e <__bad_interrupt>
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	6c c3       	rjmp	.+1752   	; 0x6f0 <__vector_11>
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	39 c0       	rjmp	.+114    	; 0x8e <__bad_interrupt>
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	37 c0       	rjmp	.+110    	; 0x8e <__bad_interrupt>
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	35 c0       	rjmp	.+106    	; 0x8e <__bad_interrupt>
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	33 c0       	rjmp	.+102    	; 0x8e <__bad_interrupt>
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	31 c0       	rjmp	.+98     	; 0x8e <__bad_interrupt>
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	2f c0       	rjmp	.+94     	; 0x8e <__bad_interrupt>
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	2d c0       	rjmp	.+90     	; 0x8e <__bad_interrupt>
  34:	31 c4       	rjmp	.+2146   	; 0x898 <dec_to_bin_normal+0x1e>
  36:	32 c4       	rjmp	.+2148   	; 0x89c <dec_to_bin_normal+0x22>
  38:	33 c4       	rjmp	.+2150   	; 0x8a0 <dec_to_bin_normal+0x26>
  3a:	34 c4       	rjmp	.+2152   	; 0x8a4 <dec_to_bin_normal+0x2a>
  3c:	35 c4       	rjmp	.+2154   	; 0x8a8 <dec_to_bin_normal+0x2e>
  3e:	36 c4       	rjmp	.+2156   	; 0x8ac <dec_to_bin_normal+0x32>
  40:	37 c4       	rjmp	.+2158   	; 0x8b0 <dec_to_bin_normal+0x36>
  42:	26 c4       	rjmp	.+2124   	; 0x890 <dec_to_bin_normal+0x16>
  44:	27 c4       	rjmp	.+2126   	; 0x894 <dec_to_bin_normal+0x1a>
  46:	45 c4       	rjmp	.+2186   	; 0x8d2 <dec_to_bin_fucked+0x1e>
  48:	46 c4       	rjmp	.+2188   	; 0x8d6 <dec_to_bin_fucked+0x22>
  4a:	47 c4       	rjmp	.+2190   	; 0x8da <dec_to_bin_fucked+0x26>
  4c:	48 c4       	rjmp	.+2192   	; 0x8de <dec_to_bin_fucked+0x2a>
  4e:	49 c4       	rjmp	.+2194   	; 0x8e2 <dec_to_bin_fucked+0x2e>
  50:	4a c4       	rjmp	.+2196   	; 0x8e6 <dec_to_bin_fucked+0x32>
  52:	4b c4       	rjmp	.+2198   	; 0x8ea <dec_to_bin_fucked+0x36>
  54:	3a c4       	rjmp	.+2164   	; 0x8ca <dec_to_bin_fucked+0x16>
  56:	3b c4       	rjmp	.+2166   	; 0x8ce <dec_to_bin_fucked+0x1a>

00000058 <__ctors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf ef       	ldi	r28, 0xFF	; 255
  5e:	d2 e0       	ldi	r29, 0x02	; 2
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_copy_data>:
  64:	11 e0       	ldi	r17, 0x01	; 1
  66:	a0 e0       	ldi	r26, 0x00	; 0
  68:	b1 e0       	ldi	r27, 0x01	; 1
  6a:	ee e1       	ldi	r30, 0x1E	; 30
  6c:	fa e0       	ldi	r31, 0x0A	; 10
  6e:	02 c0       	rjmp	.+4      	; 0x74 <.do_copy_data_start>

00000070 <.do_copy_data_loop>:
  70:	05 90       	lpm	r0, Z+
  72:	0d 92       	st	X+, r0

00000074 <.do_copy_data_start>:
  74:	a0 30       	cpi	r26, 0x00	; 0
  76:	b1 07       	cpc	r27, r17
  78:	d9 f7       	brne	.-10     	; 0x70 <.do_copy_data_loop>

0000007a <__do_clear_bss>:
  7a:	11 e0       	ldi	r17, 0x01	; 1
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	b1 e0       	ldi	r27, 0x01	; 1
  80:	01 c0       	rjmp	.+2      	; 0x84 <.do_clear_bss_start>

00000082 <.do_clear_bss_loop>:
  82:	1d 92       	st	X+, r1

00000084 <.do_clear_bss_start>:
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	e1 f7       	brne	.-8      	; 0x82 <.do_clear_bss_loop>
  8a:	08 d2       	rcall	.+1040   	; 0x49c <main>
  8c:	c6 c4       	rjmp	.+2444   	; 0xa1a <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <chk_button_momt>:
//
uint8_t chk_button_momt(uint8_t button) {
  static uint16_t state[3] = {0,0,0}; //holds present state for 3 seperate buttons
  uint8_t switch_bit = PD3;
  
  switch(button){
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	11 f1       	breq	.+68     	; 0xd8 <chk_button_momt+0x48>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	19 f1       	breq	.+70     	; 0xde <chk_button_momt+0x4e>
  98:	43 e0       	ldi	r20, 0x03	; 3
  9a:	50 e0       	ldi	r21, 0x00	; 0
		case(2):
			switch_bit = PD5;
			break;
  }
  
  state[button] = (state[button] << 1) | (! bit_is_clear(PIND, switch_bit)) | 0xE000;
  9c:	e8 2f       	mov	r30, r24
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	29 b1       	in	r18, 0x09	; 9
  a2:	ee 0f       	add	r30, r30
  a4:	ff 1f       	adc	r31, r31
  a6:	e6 5f       	subi	r30, 0xF6	; 246
  a8:	fe 4f       	sbci	r31, 0xFE	; 254
  aa:	80 81       	ld	r24, Z
  ac:	91 81       	ldd	r25, Z+1	; 0x01
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	90 6e       	ori	r25, 0xE0	; 224
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <chk_button_momt+0x2c>
  b8:	35 95       	asr	r19
  ba:	27 95       	ror	r18
  bc:	4a 95       	dec	r20
  be:	e2 f7       	brpl	.-8      	; 0xb8 <chk_button_momt+0x28>
  c0:	21 70       	andi	r18, 0x01	; 1
  c2:	30 70       	andi	r19, 0x00	; 0
  c4:	82 2b       	or	r24, r18
  c6:	93 2b       	or	r25, r19
  c8:	91 83       	std	Z+1, r25	; 0x01
  ca:	80 83       	st	Z, r24
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	80 50       	subi	r24, 0x00	; 0
  d0:	90 4f       	sbci	r25, 0xF0	; 240
  d2:	41 f0       	breq	.+16     	; 0xe4 <chk_button_momt+0x54>
  if (state[button] == 0xF000) return 1;
  return 0;
}
  d4:	82 2f       	mov	r24, r18
  d6:	08 95       	ret
//
uint8_t chk_button_momt(uint8_t button) {
  static uint16_t state[3] = {0,0,0}; //holds present state for 3 seperate buttons
  uint8_t switch_bit = PD3;
  
  switch(button){
  d8:	44 e0       	ldi	r20, 0x04	; 4
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	df cf       	rjmp	.-66     	; 0x9c <chk_button_momt+0xc>
  de:	45 e0       	ldi	r20, 0x05	; 5
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	dc cf       	rjmp	.-72     	; 0x9c <chk_button_momt+0xc>
		case(2):
			switch_bit = PD5;
			break;
  }
  
  state[button] = (state[button] << 1) | (! bit_is_clear(PIND, switch_bit)) | 0xE000;
  e4:	21 e0       	ldi	r18, 0x01	; 1
  if (state[button] == 0xF000) return 1;
  return 0;
}
  e6:	82 2f       	mov	r24, r18
  e8:	08 95       	ret

000000ea <chk_button_hold>:
//
uint8_t chk_button_hold(uint8_t button) {
  static uint16_t state[3] = {0,0,0}; //holds present state for 3 seperate buttons
  uint8_t switch_bit = PD3;
  
  switch(button){
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	11 f1       	breq	.+68     	; 0x132 <chk_button_hold+0x48>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	19 f1       	breq	.+70     	; 0x138 <chk_button_hold+0x4e>
  f2:	43 e0       	ldi	r20, 0x03	; 3
  f4:	50 e0       	ldi	r21, 0x00	; 0
		case(2):
			switch_bit = PD5;
			break;
  }
  
  state[button] = (state[button] << 1) | (! bit_is_clear(PIND, switch_bit)) | 0xE000;
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	29 b1       	in	r18, 0x09	; 9
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	ec 5f       	subi	r30, 0xFC	; 252
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	80 81       	ld	r24, Z
 106:	91 81       	ldd	r25, Z+1	; 0x01
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	90 6e       	ori	r25, 0xE0	; 224
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <chk_button_hold+0x2c>
 112:	35 95       	asr	r19
 114:	27 95       	ror	r18
 116:	4a 95       	dec	r20
 118:	e2 f7       	brpl	.-8      	; 0x112 <chk_button_hold+0x28>
 11a:	21 70       	andi	r18, 0x01	; 1
 11c:	30 70       	andi	r19, 0x00	; 0
 11e:	82 2b       	or	r24, r18
 120:	93 2b       	or	r25, r19
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	80 50       	subi	r24, 0x00	; 0
 12a:	90 4e       	sbci	r25, 0xE0	; 224
 12c:	41 f0       	breq	.+16     	; 0x13e <chk_button_hold+0x54>
  if (state[button] == 0xE000) return 1;
  return 0;
}
 12e:	82 2f       	mov	r24, r18
 130:	08 95       	ret
//
uint8_t chk_button_hold(uint8_t button) {
  static uint16_t state[3] = {0,0,0}; //holds present state for 3 seperate buttons
  uint8_t switch_bit = PD3;
  
  switch(button){
 132:	44 e0       	ldi	r20, 0x04	; 4
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	df cf       	rjmp	.-66     	; 0xf6 <chk_button_hold+0xc>
 138:	45 e0       	ldi	r20, 0x05	; 5
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	dc cf       	rjmp	.-72     	; 0xf6 <chk_button_hold+0xc>
		case(2):
			switch_bit = PD5;
			break;
  }
  
  state[button] = (state[button] << 1) | (! bit_is_clear(PIND, switch_bit)) | 0xE000;
 13e:	21 e0       	ldi	r18, 0x01	; 1
  if (state[button] == 0xE000) return 1;
  return 0;
}
 140:	82 2f       	mov	r24, r18
 142:	08 95       	ret

00000144 <init_time>:
//******************************************************************************

void init_time(struct time *obj){
 144:	fc 01       	movw	r30, r24
    obj->minutes = 0;
 146:	13 82       	std	Z+3, r1	; 0x03
    obj->minutes_ones = 0;
 148:	14 82       	std	Z+4, r1	; 0x04
    obj->minutes_tens = 0;
 14a:	15 82       	std	Z+5, r1	; 0x05
    obj->hours = 0;
 14c:	16 82       	std	Z+6, r1	; 0x06
    obj->hours_ones = 0;
 14e:	17 82       	std	Z+7, r1	; 0x07
    obj->hours_tens = 0;
 150:	10 86       	std	Z+8, r1	; 0x08
    obj->pm_am_n = 0;
 152:	11 86       	std	Z+9, r1	; 0x09
}
 154:	08 95       	ret

00000156 <increment_hours>:
    write_minutes(); 
    write_hours();
    set_tubes(clock_time.minutes_ones, clock_time.minutes_tens, clock_time.hours_ones, clock_time.hours_tens , TRUE);
}

void increment_hours(struct time *obj){
 156:	fc 01       	movw	r30, r24
    if(obj->hours < 9){
 158:	86 81       	ldd	r24, Z+6	; 0x06
 15a:	89 30       	cpi	r24, 0x09	; 9
 15c:	98 f0       	brcs	.+38     	; 0x184 <increment_hours+0x2e>
        // increment *obj->hours by one;
        obj->hours_ones++;
    }
    else if(obj->hours == 9){
 15e:	89 30       	cpi	r24, 0x09	; 9
 160:	41 f1       	breq	.+80     	; 0x1b2 <increment_hours+0x5c>
        obj->hours_tens=1;
        obj->hours_ones=0;
    }
    else if(obj->hours < 12){
 162:	8c 30       	cpi	r24, 0x0C	; 12
 164:	d0 f4       	brcc	.+52     	; 0x19a <increment_hours+0x44>
        obj->hours_ones++;
 166:	37 81       	ldd	r19, Z+7	; 0x07
 168:	3f 5f       	subi	r19, 0xFF	; 255
 16a:	37 83       	std	Z+7, r19	; 0x07
        obj->pm_am_n = (obj->hours == 11) ? !obj->pm_am_n : obj->pm_am_n; // Switch to AM/PM depending on current state of rolling from 11 to 12.
 16c:	8b 30       	cpi	r24, 0x0B	; 11
 16e:	69 f1       	breq	.+90     	; 0x1ca <increment_hours+0x74>
 170:	91 85       	ldd	r25, Z+9	; 0x09
 172:	91 87       	std	Z+9, r25	; 0x09
    }
    else{
        obj->hours_tens=0;
        obj->hours_ones=1;
    }
    obj->hours = obj->hours_tens*10 + obj->hours_ones;
 174:	80 85       	ldd	r24, Z+8	; 0x08
 176:	2a e0       	ldi	r18, 0x0A	; 10
 178:	82 9f       	mul	r24, r18
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	38 0f       	add	r19, r24
 180:	36 83       	std	Z+6, r19	; 0x06
}
 182:	08 95       	ret
}

void increment_hours(struct time *obj){
    if(obj->hours < 9){
        // increment *obj->hours by one;
        obj->hours_ones++;
 184:	37 81       	ldd	r19, Z+7	; 0x07
 186:	3f 5f       	subi	r19, 0xFF	; 255
 188:	37 83       	std	Z+7, r19	; 0x07
    }
    else{
        obj->hours_tens=0;
        obj->hours_ones=1;
    }
    obj->hours = obj->hours_tens*10 + obj->hours_ones;
 18a:	80 85       	ldd	r24, Z+8	; 0x08
 18c:	2a e0       	ldi	r18, 0x0A	; 10
 18e:	82 9f       	mul	r24, r18
 190:	c0 01       	movw	r24, r0
 192:	11 24       	eor	r1, r1
 194:	38 0f       	add	r19, r24
 196:	36 83       	std	Z+6, r19	; 0x06
}
 198:	08 95       	ret
    else if(obj->hours < 12){
        obj->hours_ones++;
        obj->pm_am_n = (obj->hours == 11) ? !obj->pm_am_n : obj->pm_am_n; // Switch to AM/PM depending on current state of rolling from 11 to 12.
    }
    else{
        obj->hours_tens=0;
 19a:	10 86       	std	Z+8, r1	; 0x08
        obj->hours_ones=1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	87 83       	std	Z+7, r24	; 0x07
 1a0:	31 e0       	ldi	r19, 0x01	; 1
    }
    obj->hours = obj->hours_tens*10 + obj->hours_ones;
 1a2:	80 85       	ldd	r24, Z+8	; 0x08
 1a4:	2a e0       	ldi	r18, 0x0A	; 10
 1a6:	82 9f       	mul	r24, r18
 1a8:	c0 01       	movw	r24, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	38 0f       	add	r19, r24
 1ae:	36 83       	std	Z+6, r19	; 0x06
}
 1b0:	08 95       	ret
    if(obj->hours < 9){
        // increment *obj->hours by one;
        obj->hours_ones++;
    }
    else if(obj->hours == 9){
        obj->hours_tens=1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 87       	std	Z+8, r24	; 0x08
        obj->hours_ones=0;
 1b6:	17 82       	std	Z+7, r1	; 0x07
 1b8:	30 e0       	ldi	r19, 0x00	; 0
    }
    else{
        obj->hours_tens=0;
        obj->hours_ones=1;
    }
    obj->hours = obj->hours_tens*10 + obj->hours_ones;
 1ba:	80 85       	ldd	r24, Z+8	; 0x08
 1bc:	2a e0       	ldi	r18, 0x0A	; 10
 1be:	82 9f       	mul	r24, r18
 1c0:	c0 01       	movw	r24, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	38 0f       	add	r19, r24
 1c6:	36 83       	std	Z+6, r19	; 0x06
}
 1c8:	08 95       	ret
        obj->hours_tens=1;
        obj->hours_ones=0;
    }
    else if(obj->hours < 12){
        obj->hours_ones++;
        obj->pm_am_n = (obj->hours == 11) ? !obj->pm_am_n : obj->pm_am_n; // Switch to AM/PM depending on current state of rolling from 11 to 12.
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	81 85       	ldd	r24, Z+9	; 0x09
 1ce:	88 23       	and	r24, r24
 1d0:	81 f6       	brne	.-96     	; 0x172 <increment_hours+0x1c>
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	91 87       	std	Z+9, r25	; 0x09
 1d6:	ce cf       	rjmp	.-100    	; 0x174 <increment_hours+0x1e>

000001d8 <increment_minutes>:
        obj->hours_ones=1;
    }
    obj->hours = obj->hours_tens*10 + obj->hours_ones;
}

void increment_minutes(struct time *obj){
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	ec 01       	movw	r28, r24
    if((obj->minutes_ones%10 != 9)){
 1de:	2c 81       	ldd	r18, Y+4	; 0x04
 1e0:	82 2f       	mov	r24, r18
 1e2:	6a e0       	ldi	r22, 0x0A	; 10
 1e4:	c2 d3       	rcall	.+1924   	; 0x96a <__udivmodqi4>
 1e6:	99 30       	cpi	r25, 0x09	; 9
 1e8:	69 f0       	breq	.+26     	; 0x204 <increment_minutes+0x2c>
        obj->minutes_ones++; // increment *obj->minutes by one;
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	2c 83       	std	Y+4, r18	; 0x04
    }
    else{
        obj->minutes_ones = 0;
        obj->minutes_tens++; // increment *obj.minutes by one;
    }
    obj->minutes = obj->minutes_tens*10 + obj->minutes_ones;
 1ee:	8d 81       	ldd	r24, Y+5	; 0x05
 1f0:	2a e0       	ldi	r18, 0x0A	; 10
 1f2:	82 9f       	mul	r24, r18
 1f4:	c0 01       	movw	r24, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2c 81       	ldd	r18, Y+4	; 0x04
 1fa:	28 0f       	add	r18, r24
 1fc:	2b 83       	std	Y+3, r18	; 0x03
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

void increment_minutes(struct time *obj){
    if((obj->minutes_ones%10 != 9)){
        obj->minutes_ones++; // increment *obj->minutes by one;
    }
    else if(obj->minutes_ones%10 == 9 && obj->minutes_tens == 5){
 204:	8d 81       	ldd	r24, Y+5	; 0x05
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	21 f0       	breq	.+8      	; 0x212 <increment_minutes+0x3a>
        obj->minutes_tens = 0;
         // increment *obj->minutes by one;
        increment_hours(obj);
    }
    else{
        obj->minutes_ones = 0;
 20a:	1c 82       	std	Y+4, r1	; 0x04
        obj->minutes_tens++; // increment *obj.minutes by one;
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	8d 83       	std	Y+5, r24	; 0x05
 210:	ee cf       	rjmp	.-36     	; 0x1ee <increment_minutes+0x16>
void increment_minutes(struct time *obj){
    if((obj->minutes_ones%10 != 9)){
        obj->minutes_ones++; // increment *obj->minutes by one;
    }
    else if(obj->minutes_ones%10 == 9 && obj->minutes_tens == 5){
        obj->minutes_ones = 0;
 212:	1c 82       	std	Y+4, r1	; 0x04
        obj->minutes_tens = 0;
 214:	1d 82       	std	Y+5, r1	; 0x05
         // increment *obj->minutes by one;
        increment_hours(obj);
 216:	ce 01       	movw	r24, r28
 218:	9e df       	rcall	.-196    	; 0x156 <increment_hours>
 21a:	e9 cf       	rjmp	.-46     	; 0x1ee <increment_minutes+0x16>

0000021c <convt_24hr>:
    clock_time.hours_tens = ((read_data>>4)&0x1);
    clock_time.pm_am_n = ((read_data>>5)&0x1);
    clock_time.hours = clock_time.hours_tens*10 + clock_time.hours_ones;
}

void convt_24hr(uint8_t *hrs_tens_24, uint8_t *hrs_ones_24, struct time *obj){
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
 222:	9b 01       	movw	r18, r22
 224:	fa 01       	movw	r30, r20
    if(obj->pm_am_n){
 226:	81 85       	ldd	r24, Z+9	; 0x09
 228:	88 23       	and	r24, r24
 22a:	a9 f0       	breq	.+42     	; 0x256 <convt_24hr+0x3a>
        if(*hrs_tens_24 == 1 && *hrs_ones_24 == 2){
 22c:	98 81       	ld	r25, Y
 22e:	91 30       	cpi	r25, 0x01	; 1
 230:	e9 f0       	breq	.+58     	; 0x26c <convt_24hr+0x50>
            *hrs_tens_24 = *hrs_tens_24;
            *hrs_ones_24 = *hrs_ones_24;
        }
        else{
            *hrs_tens_24 = (obj->hours+12)/10;
 232:	86 81       	ldd	r24, Z+6	; 0x06
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0c 96       	adiw	r24, 0x0c	; 12
 238:	6a e0       	ldi	r22, 0x0A	; 10
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	a2 d3       	rcall	.+1860   	; 0x982 <__divmodhi4>
 23e:	68 83       	st	Y, r22
            *hrs_ones_24 = (obj->hours+12)%10;
 240:	86 81       	ldd	r24, Z+6	; 0x06
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0c 96       	adiw	r24, 0x0c	; 12
 246:	6a e0       	ldi	r22, 0x0A	; 10
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	9b d3       	rcall	.+1846   	; 0x982 <__divmodhi4>
 24c:	f9 01       	movw	r30, r18
 24e:	80 83       	st	Z, r24
        else{
            *hrs_tens_24 = *hrs_tens_24;
            *hrs_ones_24 = *hrs_ones_24;
        }
    }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret
            *hrs_tens_24 = (obj->hours+12)/10;
            *hrs_ones_24 = (obj->hours+12)%10;
        }
    }
    else{
        if(*hrs_tens_24 == 1 && *hrs_ones_24 == 2){
 256:	98 81       	ld	r25, Y
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	69 f0       	breq	.+26     	; 0x276 <convt_24hr+0x5a>
 25c:	fb 01       	movw	r30, r22
 25e:	80 81       	ld	r24, Z
            *hrs_tens_24 = 0;
            *hrs_ones_24 = 0;
        }
        else{
            *hrs_tens_24 = *hrs_tens_24;
 260:	98 83       	st	Y, r25
            *hrs_ones_24 = *hrs_ones_24;
 262:	d9 01       	movw	r26, r18
 264:	8c 93       	st	X, r24
        }
    }
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret
    clock_time.hours = clock_time.hours_tens*10 + clock_time.hours_ones;
}

void convt_24hr(uint8_t *hrs_tens_24, uint8_t *hrs_ones_24, struct time *obj){
    if(obj->pm_am_n){
        if(*hrs_tens_24 == 1 && *hrs_ones_24 == 2){
 26c:	db 01       	movw	r26, r22
 26e:	8c 91       	ld	r24, X
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	f9 f6       	brne	.-66     	; 0x232 <convt_24hr+0x16>
 274:	f8 cf       	rjmp	.-16     	; 0x266 <convt_24hr+0x4a>
            *hrs_tens_24 = (obj->hours+12)/10;
            *hrs_ones_24 = (obj->hours+12)%10;
        }
    }
    else{
        if(*hrs_tens_24 == 1 && *hrs_ones_24 == 2){
 276:	db 01       	movw	r26, r22
 278:	8c 91       	ld	r24, X
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	89 f7       	brne	.-30     	; 0x260 <convt_24hr+0x44>
            *hrs_tens_24 = 0;
 27e:	18 82       	st	Y, r1
            *hrs_ones_24 = 0;
 280:	1c 92       	st	X, r1
 282:	f1 cf       	rjmp	.-30     	; 0x266 <convt_24hr+0x4a>

00000284 <timer1_init>:
//			timer1 init
//initializes timer1 to handle updating time.
//Do this twice a second. This is probably still to frequent,
// but should be safe enough.
void timer1_init(void){
  cli();
 284:	f8 94       	cli
  TCCR1A = 0;
 286:	10 92 80 00 	sts	0x0080, r1
  TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10); // Cio/1024
 28a:	e1 e8       	ldi	r30, 0x81	; 129
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	8d 60       	ori	r24, 0x0D	; 13
 292:	80 83       	st	Z, r24
  // OCR1A = 0x30D;			  	   // Freq ~ 10Hz
  OCR1A = 0xF41;	               // Freq ~ 2Hz
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	9f e0       	ldi	r25, 0x0F	; 15
 298:	90 93 89 00 	sts	0x0089, r25
 29c:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 |= (1<<OCIE1A);		   // Enable interrupt
 2a0:	ef e6       	ldi	r30, 0x6F	; 111
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
}
 2aa:	08 95       	ret

000002ac <trim_rtc>:
// due to average RTC Fmeas = ~32,767.682Hz
// See mcp7940n.pdf pg. 30 for calculation of this number.
void trim_rtc(void){
    static uint8_t trim_comp = 0;

    write_rtc(0x8, ((1<<7)|((14+trim_comp)<<0))); // Trim for observed drift
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	6e e8       	ldi	r22, 0x8E	; 142
 2b0:	75 d2       	rcall	.+1258   	; 0x79c <write_rtc>

    //alternate trim comp by 1 every time this is called to achieve a half value.
    // trim_comp = (trim_comp == 0) ? 1 : 0;
}
 2b2:	08 95       	ret

000002b4 <write_minutes>:
void write_hours(void){
    write_rtc(0x02,((1<<6)|(clock_time.pm_am_n << 5)|((clock_time.hours_tens&0x1) << 4)|(clock_time.hours_ones&0xF))); 
}

void write_minutes(void){
    write_rtc(0x01, (((clock_time.minutes_tens&0x7)<<4)|(clock_time.minutes_ones&0xF)));
 2b4:	80 91 29 01 	lds	r24, 0x0129
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	87 70       	andi	r24, 0x07	; 7
 2bc:	90 70       	andi	r25, 0x00	; 0
 2be:	82 95       	swap	r24
 2c0:	92 95       	swap	r25
 2c2:	90 7f       	andi	r25, 0xF0	; 240
 2c4:	98 27       	eor	r25, r24
 2c6:	80 7f       	andi	r24, 0xF0	; 240
 2c8:	98 27       	eor	r25, r24
 2ca:	60 91 28 01 	lds	r22, 0x0128
 2ce:	6f 70       	andi	r22, 0x0F	; 15
 2d0:	68 2b       	or	r22, r24
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	63 d2       	rcall	.+1222   	; 0x79c <write_rtc>
}
 2d6:	08 95       	ret

000002d8 <write_hours>:
	// write_rtc(0x00, ((1<<7)|((0&0x7) << 4)|(0&0xF)))  ; // set the seconds + enable the RTC oscillator 

}

void write_hours(void){
    write_rtc(0x02,((1<<6)|(clock_time.pm_am_n << 5)|((clock_time.hours_tens&0x1) << 4)|(clock_time.hours_ones&0xF))); 
 2d8:	80 91 2b 01 	lds	r24, 0x012B
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	60 91 2d 01 	lds	r22, 0x012D
 2e4:	62 95       	swap	r22
 2e6:	66 0f       	add	r22, r22
 2e8:	60 7e       	andi	r22, 0xE0	; 224
 2ea:	68 2b       	or	r22, r24
 2ec:	80 91 2c 01 	lds	r24, 0x012C
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	81 70       	andi	r24, 0x01	; 1
 2f4:	90 70       	andi	r25, 0x00	; 0
 2f6:	82 95       	swap	r24
 2f8:	92 95       	swap	r25
 2fa:	90 7f       	andi	r25, 0xF0	; 240
 2fc:	98 27       	eor	r25, r24
 2fe:	80 7f       	andi	r24, 0xF0	; 240
 300:	98 27       	eor	r25, r24
 302:	68 2b       	or	r22, r24
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	4a d2       	rcall	.+1172   	; 0x79c <write_rtc>
}
 308:	08 95       	ret

0000030a <write_seconds>:
    obj->hours_tens = 0;
    obj->pm_am_n = 0;
}

void write_seconds(void){
	write_rtc(0x00, ((1<<7)|((clock_time.seconds_tens&0x7) << 4)|(clock_time.seconds_ones&0xF)))  ; // set the seconds + enable the RTC oscillator 
 30a:	60 91 25 01 	lds	r22, 0x0125
 30e:	6f 70       	andi	r22, 0x0F	; 15
 310:	60 68       	ori	r22, 0x80	; 128
 312:	80 91 26 01 	lds	r24, 0x0126
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	87 70       	andi	r24, 0x07	; 7
 31a:	90 70       	andi	r25, 0x00	; 0
 31c:	82 95       	swap	r24
 31e:	92 95       	swap	r25
 320:	90 7f       	andi	r25, 0xF0	; 240
 322:	98 27       	eor	r25, r24
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	98 27       	eor	r25, r24
 328:	68 2b       	or	r22, r24
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	37 d2       	rcall	.+1134   	; 0x79c <write_rtc>
	// write_rtc(0x00, ((1<<7)|((0&0x7) << 4)|(0&0xF)))  ; // set the seconds + enable the RTC oscillator 

}
 32e:	08 95       	ret

00000330 <get_time_change>:
            *hrs_ones_24 = *hrs_ones_24;
        }
    }
}

void get_time_change(struct time *obj, uint16_t top_cnt){
 330:	ef 92       	push	r14
 332:	ff 92       	push	r15
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	df 93       	push	r29
 33a:	cf 93       	push	r28
 33c:	00 d0       	rcall	.+0      	; 0x33e <get_time_change+0xe>
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	8c 01       	movw	r16, r24
 344:	7b 01       	movw	r14, r22
    static uint16_t dot_cnt;
    uint8_t hours_tens_24hr;
    uint8_t hours_ones_24hr;

    if(chk_button_momt(0)){
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	a3 de       	rcall	.-698    	; 0x90 <chk_button_momt>
 34a:	88 23       	and	r24, r24
 34c:	71 f1       	breq	.+92     	; 0x3aa <get_time_change+0x7a>
        increment_hours(obj);
 34e:	c8 01       	movw	r24, r16
 350:	02 df       	rcall	.-508    	; 0x156 <increment_hours>
    }
    else if(chk_button_momt(1)){
        increment_minutes(obj);
    }
    dot_cnt = (dot_cnt >= top_cnt) ? 0 : dot_cnt + 1;
 352:	80 91 00 01 	lds	r24, 0x0100
 356:	90 91 01 01 	lds	r25, 0x0101
 35a:	8e 15       	cp	r24, r14
 35c:	9f 05       	cpc	r25, r15
 35e:	90 f5       	brcc	.+100    	; 0x3c4 <get_time_change+0x94>
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	ff 24       	eor	r15, r15
 364:	80 38       	cpi	r24, 0x80	; 128
 366:	91 05       	cpc	r25, r1
 368:	90 f1       	brcs	.+100    	; 0x3ce <get_time_change+0x9e>
 36a:	90 93 01 01 	sts	0x0101, r25
 36e:	80 93 00 01 	sts	0x0100, r24

    hours_tens_24hr = obj->hours_tens;
 372:	f8 01       	movw	r30, r16
 374:	80 85       	ldd	r24, Z+8	; 0x08
 376:	89 83       	std	Y+1, r24	; 0x01
    hours_ones_24hr = obj->hours_ones;
 378:	87 81       	ldd	r24, Z+7	; 0x07
 37a:	8a 83       	std	Y+2, r24	; 0x02
    convt_24hr(&hours_tens_24hr, &hours_ones_24hr, obj);
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	be 01       	movw	r22, r28
 382:	6e 5f       	subi	r22, 0xFE	; 254
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	a8 01       	movw	r20, r16
 388:	49 df       	rcall	.-366    	; 0x21c <convt_24hr>

    set_tubes(obj->minutes_ones, obj->minutes_tens, hours_ones_24hr, hours_tens_24hr, (dot_cnt <128));
 38a:	f8 01       	movw	r30, r16
 38c:	84 81       	ldd	r24, Z+4	; 0x04
 38e:	65 81       	ldd	r22, Z+5	; 0x05
 390:	4a 81       	ldd	r20, Y+2	; 0x02
 392:	29 81       	ldd	r18, Y+1	; 0x01
 394:	0f 2d       	mov	r16, r15
 396:	ab d2       	rcall	.+1366   	; 0x8ee <set_tubes>
}
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	cf 91       	pop	r28
 39e:	df 91       	pop	r29
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	08 95       	ret
    uint8_t hours_ones_24hr;

    if(chk_button_momt(0)){
        increment_hours(obj);
    }
    else if(chk_button_momt(1)){
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	71 de       	rcall	.-798    	; 0x90 <chk_button_momt>
 3ae:	88 23       	and	r24, r24
 3b0:	81 f2       	breq	.-96     	; 0x352 <get_time_change+0x22>
        increment_minutes(obj);
 3b2:	c8 01       	movw	r24, r16
 3b4:	11 df       	rcall	.-478    	; 0x1d8 <increment_minutes>
    }
    dot_cnt = (dot_cnt >= top_cnt) ? 0 : dot_cnt + 1;
 3b6:	80 91 00 01 	lds	r24, 0x0100
 3ba:	90 91 01 01 	lds	r25, 0x0101
 3be:	8e 15       	cp	r24, r14
 3c0:	9f 05       	cpc	r25, r15
 3c2:	70 f2       	brcs	.-100    	; 0x360 <get_time_change+0x30>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ff 24       	eor	r15, r15
 3ca:	f3 94       	inc	r15
 3cc:	ce cf       	rjmp	.-100    	; 0x36a <get_time_change+0x3a>
 3ce:	ff 24       	eor	r15, r15
 3d0:	f3 94       	inc	r15
 3d2:	cb cf       	rjmp	.-106    	; 0x36a <get_time_change+0x3a>

000003d4 <cathode_poisin_prevention>:
        obj->minutes_tens++; // increment *obj.minutes by one;
    }
    obj->minutes = obj->minutes_tens*10 + obj->minutes_ones;
}

void cathode_poisin_prevention(void){
 3d4:	0f 93       	push	r16
    static uint8_t hold_cnt;
    static uint8_t digit = 0;

    hold_cnt++;
 3d6:	80 91 03 01 	lds	r24, 0x0103
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	80 93 03 01 	sts	0x0103, r24

    if(hold_cnt == 255){
 3e0:	8f 3f       	cpi	r24, 0xFF	; 255
 3e2:	49 f0       	breq	.+18     	; 0x3f6 <cathode_poisin_prevention+0x22>
        digit = digit == 9 ? 0 : digit + 1;
    }
    set_tubes( digit, digit, digit, digit , FALSE);
 3e4:	20 91 02 01 	lds	r18, 0x0102
 3e8:	82 2f       	mov	r24, r18
 3ea:	62 2f       	mov	r22, r18
 3ec:	42 2f       	mov	r20, r18
 3ee:	00 e0       	ldi	r16, 0x00	; 0
 3f0:	7e d2       	rcall	.+1276   	; 0x8ee <set_tubes>
}
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret
    static uint8_t digit = 0;

    hold_cnt++;

    if(hold_cnt == 255){
        digit = digit == 9 ? 0 : digit + 1;
 3f6:	80 91 02 01 	lds	r24, 0x0102
 3fa:	89 30       	cpi	r24, 0x09	; 9
 3fc:	21 f0       	breq	.+8      	; 0x406 <cathode_poisin_prevention+0x32>
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 02 01 	sts	0x0102, r24
 404:	ef cf       	rjmp	.-34     	; 0x3e4 <cathode_poisin_prevention+0x10>
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	fb cf       	rjmp	.-10     	; 0x400 <cathode_poisin_prevention+0x2c>

0000040a <update_time>:

void write_minutes(void){
    write_rtc(0x01, (((clock_time.minutes_tens&0x7)<<4)|(clock_time.minutes_ones&0xF)));
}

void update_time(void){
 40a:	0f 93       	push	r16
    write_minutes(); 
 40c:	53 df       	rcall	.-346    	; 0x2b4 <write_minutes>
    write_hours();
 40e:	64 df       	rcall	.-312    	; 0x2d8 <write_hours>
    set_tubes(clock_time.minutes_ones, clock_time.minutes_tens, clock_time.hours_ones, clock_time.hours_tens , TRUE);
 410:	80 91 28 01 	lds	r24, 0x0128
 414:	60 91 29 01 	lds	r22, 0x0129
 418:	40 91 2b 01 	lds	r20, 0x012B
 41c:	20 91 2c 01 	lds	r18, 0x012C
 420:	01 e0       	ldi	r16, 0x01	; 1
 422:	65 d2       	rcall	.+1226   	; 0x8ee <set_tubes>
}
 424:	0f 91       	pop	r16
 426:	08 95       	ret

00000428 <get_time>:
        digit = digit == 9 ? 0 : digit + 1;
    }
    set_tubes( digit, digit, digit, digit , FALSE);
}

void get_time(void){
 428:	1f 93       	push	r17
	uint8_t read_data;
    read_data=read_rtc(0x00); // Read the clock_time.seconds
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	de d1       	rcall	.+956    	; 0x7ea <read_rtc>
    clock_time.seconds_ones = (read_data&0x0F);
 42e:	28 2f       	mov	r18, r24
 430:	2f 70       	andi	r18, 0x0F	; 15
 432:	20 93 25 01 	sts	0x0125, r18
    clock_time.seconds_tens = (read_data>>4)&0x7;
 436:	82 95       	swap	r24
 438:	87 70       	andi	r24, 0x07	; 7
 43a:	80 93 26 01 	sts	0x0126, r24
    clock_time.seconds = clock_time.seconds_tens*10 + clock_time.seconds_ones;
 43e:	1a e0       	ldi	r17, 0x0A	; 10
 440:	81 9f       	mul	r24, r17
 442:	c0 01       	movw	r24, r0
 444:	11 24       	eor	r1, r1
 446:	28 0f       	add	r18, r24
 448:	20 93 24 01 	sts	0x0124, r18

    read_data=read_rtc(0x01); // Read the clock_time.minutes
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	cd d1       	rcall	.+922    	; 0x7ea <read_rtc>
    clock_time.minutes_ones = (read_data&0x0F);
 450:	28 2f       	mov	r18, r24
 452:	2f 70       	andi	r18, 0x0F	; 15
 454:	20 93 28 01 	sts	0x0128, r18
    clock_time.minutes_tens = (read_data>>4);
 458:	82 95       	swap	r24
 45a:	8f 70       	andi	r24, 0x0F	; 15
 45c:	80 93 29 01 	sts	0x0129, r24
    clock_time.minutes = clock_time.minutes_tens*10 + clock_time.minutes_ones;
 460:	81 9f       	mul	r24, r17
 462:	c0 01       	movw	r24, r0
 464:	11 24       	eor	r1, r1
 466:	28 0f       	add	r18, r24
 468:	20 93 27 01 	sts	0x0127, r18

    read_data=read_rtc(0x02); // Read the clock_time.hours
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	bd d1       	rcall	.+890    	; 0x7ea <read_rtc>
    clock_time.hours_ones = (read_data&0x0F);
 470:	98 2f       	mov	r25, r24
 472:	9f 70       	andi	r25, 0x0F	; 15
 474:	90 93 2b 01 	sts	0x012B, r25
    clock_time.hours_tens = ((read_data>>4)&0x1);
 478:	82 95       	swap	r24
 47a:	8f 70       	andi	r24, 0x0F	; 15
 47c:	28 2f       	mov	r18, r24
 47e:	21 70       	andi	r18, 0x01	; 1
 480:	20 93 2c 01 	sts	0x012C, r18
    clock_time.pm_am_n = ((read_data>>5)&0x1);
 484:	86 95       	lsr	r24
 486:	81 70       	andi	r24, 0x01	; 1
 488:	80 93 2d 01 	sts	0x012D, r24
    clock_time.hours = clock_time.hours_tens*10 + clock_time.hours_ones;
 48c:	21 9f       	mul	r18, r17
 48e:	90 01       	movw	r18, r0
 490:	11 24       	eor	r1, r1
 492:	92 0f       	add	r25, r18
 494:	90 93 2a 01 	sts	0x012A, r25
}
 498:	1f 91       	pop	r17
 49a:	08 95       	ret

0000049c <main>:
    get_time();
}
//*******************************************************

//*******************************************************
uint8_t main(void){
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
    uint8_t mode = 0; // 0 = time, 1 = time_set, 2=power_off_start, 3=power_off_stop
    uint8_t power_en;
    uint8_t user_override = FALSE;

    // Power off nixie supply ASAP
	PORTC &= ~(1<<PC3); //keep Nixie Supply off at poweron
 4a8:	43 98       	cbi	0x08, 3	; 8
    DDRC |= (1<<PC3);   // Set PC3 as an output
 4aa:	3b 9a       	sbi	0x07, 3	; 7
	
	//Buttons
	DDRD |= (1<<PD6) | (1<<PD7); // Set PD6 and PD7 as outputs
 4ac:	8a b1       	in	r24, 0x0a	; 10
 4ae:	80 6c       	ori	r24, 0xC0	; 192
 4b0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PD3); // SW4
 4b2:	53 98       	cbi	0x0a, 3	; 10
	DDRD &= ~(1<<PD4); // SW3
 4b4:	54 98       	cbi	0x0a, 4	; 10
	DDRD &= ~(1<<PD5); // SW2
 4b6:	55 98       	cbi	0x0a, 5	; 10
	PORTD |= (1<<PD3) | (1<<PD4) | (1<<PD5); //enable pullups
 4b8:	8b b1       	in	r24, 0x0b	; 11
 4ba:	88 63       	ori	r24, 0x38	; 56
 4bc:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PD6); 		//keep LEDs off to start
 4be:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1<<PD7); 		//keep LEDs off to start
 4c0:	5f 9a       	sbi	0x0b, 7	; 11


	// PORTD &= ~(1<<PD6);
	// PORTD &= ~(1<<PD7);

	twi_init();
 4c2:	39 d1       	rcall	.+626    	; 0x736 <twi_init>
	spi_init_master();
 4c4:	c8 d1       	rcall	.+912    	; 0x856 <spi_init_master>
    nixie_tube_supply(FALSE);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	d2 d1       	rcall	.+932    	; 0x86e <nixie_tube_supply>

	timer1_init();
 4ca:	dc de       	rcall	.-584    	; 0x284 <timer1_init>
	
    get_time(); // Get the current time
 4cc:	ad df       	rcall	.-166    	; 0x428 <get_time>
    write_seconds(); // Initialize the oscillator (preserve time)
 4ce:	1d df       	rcall	.-454    	; 0x30a <write_seconds>
    write_hours(); // Set the hours to 12 mode (preserve time)
 4d0:	03 df       	rcall	.-506    	; 0x2d8 <write_hours>
    write_rtc(0x3, 1<<3); // Enable battery backup
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	68 e0       	ldi	r22, 0x08	; 8
 4d6:	62 d1       	rcall	.+708    	; 0x79c <write_rtc>

    write_rtc(0x7, (1<<6) | (1<<0)); // Enable output oscilator
 4d8:	87 e0       	ldi	r24, 0x07	; 7
 4da:	61 e4       	ldi	r22, 0x41	; 65
 4dc:	5f d1       	rcall	.+702    	; 0x79c <write_rtc>
    // write_rtc(0x7, (1<<6) | (1<<2) | (1<<0)); // Enable output oscilator
    trim_rtc(); // Set the RTC TRIM
 4de:	e6 de       	rcall	.-564    	; 0x2ac <trim_rtc>

    // Get power down values from EEPROM
    eeprom_read_block((void*)&pwr_dwn_start_time, (const void*) &pwr_dwn_start_time_eeprom, sizeof(pwr_dwn_start_time_eeprom));
 4e0:	8a e1       	ldi	r24, 0x1A	; 26
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	4a e0       	ldi	r20, 0x0A	; 10
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	71 d2       	rcall	.+1250   	; 0x9d0 <__eerd_block_m48>
    eeprom_read_block((void*)&pwr_dwn_stop_time, (const void*) &pwr_dwn_stop_time_eeprom, sizeof(pwr_dwn_stop_time_eeprom));
 4ee:	80 e1       	ldi	r24, 0x10	; 16
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	6a e0       	ldi	r22, 0x0A	; 10
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	4a e0       	ldi	r20, 0x0A	; 10
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	6a d2       	rcall	.+1236   	; 0x9d0 <__eerd_block_m48>

    power_en = TRUE;
    nixie_tube_supply(power_en);
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	b7 d1       	rcall	.+878    	; 0x86e <nixie_tube_supply>

    // Enable interrupts now that everything is set_new_handler
    sei();
 500:	78 94       	sei
 502:	ff 24       	eor	r15, r15
 504:	11 e0       	ldi	r17, 0x01	; 1
 506:	ee 24       	eor	r14, r14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 508:	c0 ed       	ldi	r28, 0xD0	; 208
 50a:	d7 e0       	ldi	r29, 0x07	; 7
 50c:	11 c0       	rjmp	.+34     	; 0x530 <main+0x94>

	while(TRUE){
        // get_time();
        if(power_en == FALSE){
            // Turn the dispaly back on with user override of any button press
            if(chk_button_momt(0) || chk_button_momt(1) || chk_button_momt(2)){
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	bf dd       	rcall	.-1154   	; 0x90 <chk_button_momt>
 512:	88 23       	and	r24, r24
 514:	29 f4       	brne	.+10     	; 0x520 <main+0x84>
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	bb dd       	rcall	.-1162   	; 0x90 <chk_button_momt>
 51a:	88 23       	and	r24, r24
 51c:	09 f4       	brne	.+2      	; 0x520 <main+0x84>
 51e:	74 c0       	rjmp	.+232    	; 0x608 <main+0x16c>
                power_en = TRUE;
                user_override = TRUE;
                nixie_tube_supply(power_en);
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	a5 d1       	rcall	.+842    	; 0x86e <nixie_tube_supply>
 524:	11 e0       	ldi	r17, 0x01	; 1
 526:	ee 24       	eor	r14, r14
 528:	e3 94       	inc	r14
 52a:	ce 01       	movw	r24, r28
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <main+0x90>
    // Enable interrupts now that everything is set_new_handler
    sei();

	while(TRUE){
        // get_time();
        if(power_en == FALSE){
 530:	11 23       	and	r17, r17
 532:	69 f3       	breq	.-38     	; 0x50e <main+0x72>
                power_en = TRUE;
                user_override = FALSE;
                nixie_tube_supply(power_en);
            }
        }
        else if(chk_button_hold(0) && chk_button_hold(1)){
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	d9 dd       	rcall	.-1102   	; 0xea <chk_button_hold>
 538:	88 23       	and	r24, r24
 53a:	29 f0       	breq	.+10     	; 0x546 <main+0xaa>
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	d5 dd       	rcall	.-1110   	; 0xea <chk_button_hold>
 540:	88 23       	and	r24, r24
 542:	09 f0       	breq	.+2      	; 0x546 <main+0xaa>
 544:	80 c0       	rjmp	.+256    	; 0x646 <main+0x1aa>
            // Reset all times to zero
            init_time(&pwr_dwn_stop_time);
            init_time(&pwr_dwn_start_time);
        }
        else if(chk_button_momt(2)){
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	a3 dd       	rcall	.-1210   	; 0x90 <chk_button_momt>
 54a:	88 23       	and	r24, r24
 54c:	39 f0       	breq	.+14     	; 0x55c <main+0xc0>
            mode = mode < 3 ? mode + 1 : 0; // 0 = time, 1 = time_set, 2=power_off_start, 3=power_off_stop
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	8f 15       	cp	r24, r15
 552:	08 f4       	brcc	.+2      	; 0x556 <main+0xba>
 554:	46 c0       	rjmp	.+140    	; 0x5e2 <main+0x146>
 556:	f3 94       	inc	r15
 558:	11 e0       	ldi	r17, 0x01	; 1
 55a:	e7 cf       	rjmp	.-50     	; 0x52a <main+0x8e>
                eeprom_write_block ((const void*)&pwr_dwn_start_time, (void*) &pwr_dwn_start_time_eeprom, sizeof(pwr_dwn_start_time_eeprom));
                eeprom_write_block ((const void*)&pwr_dwn_stop_time, (void*) &pwr_dwn_stop_time_eeprom, sizeof(pwr_dwn_stop_time_eeprom));
                sei(); // Renable interrupts
            }            
        }
        else if(mode == 1){
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	f8 16       	cp	r15, r24
 560:	09 f4       	brne	.+2      	; 0x564 <main+0xc8>
 562:	7c c0       	rjmp	.+248    	; 0x65c <main+0x1c0>
            get_time_change(&clock_time, 255);
            write_minutes(); 
            write_hours();
        }
        else if(mode == 2){
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	f8 16       	cp	r15, r24
 568:	09 f4       	brne	.+2      	; 0x56c <main+0xd0>
 56a:	8d c0       	rjmp	.+282    	; 0x686 <main+0x1ea>
            get_time_change(&pwr_dwn_start_time, 511);
        }
        else if(mode == 3){
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	f8 16       	cp	r15, r24
 570:	09 f4       	brne	.+2      	; 0x574 <main+0xd8>
 572:	98 c0       	rjmp	.+304    	; 0x6a4 <main+0x208>
            get_time_change(&pwr_dwn_stop_time, 1023);
        }
        else if((clock_time.pm_am_n == 0) && (clock_time.hours == 3) && (clock_time.minutes < 30)){
 574:	80 91 2d 01 	lds	r24, 0x012D
 578:	88 23       	and	r24, r24
 57a:	29 f4       	brne	.+10     	; 0x586 <main+0xea>
 57c:	80 91 2a 01 	lds	r24, 0x012A
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	09 f4       	brne	.+2      	; 0x586 <main+0xea>
 584:	87 c0       	rjmp	.+270    	; 0x694 <main+0x1f8>
            cathode_poisin_prevention();
        }
        else if(chk_button_hold(0)){
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	b0 dd       	rcall	.-1184   	; 0xea <chk_button_hold>
 58a:	88 23       	and	r24, r24
 58c:	09 f0       	breq	.+2      	; 0x590 <main+0xf4>
 58e:	6f c0       	rjmp	.+222    	; 0x66e <main+0x1d2>
            set_tubes(clock_time.seconds_ones, clock_time.seconds_tens, clock_time.minutes_ones, clock_time.minutes_tens , TRUE);
        }
        else{
            if(!user_override && (clock_time.pm_am_n == pwr_dwn_start_time.pm_am_n) && (clock_time.hours == pwr_dwn_start_time.hours) && (clock_time.minutes == pwr_dwn_start_time.minutes)){
 590:	ee 20       	and	r14, r14
 592:	09 f0       	breq	.+2      	; 0x596 <main+0xfa>
 594:	60 c0       	rjmp	.+192    	; 0x656 <main+0x1ba>
 596:	90 91 2d 01 	lds	r25, 0x012D
 59a:	80 91 23 01 	lds	r24, 0x0123
 59e:	98 17       	cp	r25, r24
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <main+0x108>
 5a2:	87 c0       	rjmp	.+270    	; 0x6b2 <main+0x216>
                    power_en = FALSE;
                    user_override = FALSE;
                    nixie_tube_supply(power_en);
                }
            }
            else if((clock_time.pm_am_n == pwr_dwn_stop_time.pm_am_n) && (clock_time.hours == pwr_dwn_stop_time.hours) && (clock_time.minutes  == pwr_dwn_stop_time.minutes)){
 5a4:	80 91 19 01 	lds	r24, 0x0119
 5a8:	89 17       	cp	r24, r25
 5aa:	61 f0       	breq	.+24     	; 0x5c4 <main+0x128>
 5ac:	11 e0       	ldi	r17, 0x01	; 1
                // Restore power at user selected time
                user_override = FALSE;
            }
            set_tubes(clock_time.minutes_ones, clock_time.minutes_tens, clock_time.hours_ones, clock_time.hours_tens , TRUE);
 5ae:	80 91 28 01 	lds	r24, 0x0128
 5b2:	60 91 29 01 	lds	r22, 0x0129
 5b6:	40 91 2b 01 	lds	r20, 0x012B
 5ba:	20 91 2c 01 	lds	r18, 0x012C
 5be:	01 e0       	ldi	r16, 0x01	; 1
 5c0:	96 d1       	rcall	.+812    	; 0x8ee <set_tubes>
 5c2:	b3 cf       	rjmp	.-154    	; 0x52a <main+0x8e>
                    power_en = FALSE;
                    user_override = FALSE;
                    nixie_tube_supply(power_en);
                }
            }
            else if((clock_time.pm_am_n == pwr_dwn_stop_time.pm_am_n) && (clock_time.hours == pwr_dwn_stop_time.hours) && (clock_time.minutes  == pwr_dwn_stop_time.minutes)){
 5c4:	90 91 2a 01 	lds	r25, 0x012A
 5c8:	80 91 16 01 	lds	r24, 0x0116
 5cc:	98 17       	cp	r25, r24
 5ce:	71 f7       	brne	.-36     	; 0x5ac <main+0x110>
 5d0:	90 91 27 01 	lds	r25, 0x0127
 5d4:	80 91 13 01 	lds	r24, 0x0113
 5d8:	98 17       	cp	r25, r24
 5da:	41 f7       	brne	.-48     	; 0x5ac <main+0x110>
 5dc:	11 e0       	ldi	r17, 0x01	; 1
 5de:	ee 24       	eor	r14, r14
 5e0:	e6 cf       	rjmp	.-52     	; 0x5ae <main+0x112>
        }
        else if(chk_button_momt(2)){
            mode = mode < 3 ? mode + 1 : 0; // 0 = time, 1 = time_set, 2=power_off_start, 3=power_off_stop
            // Write power down settings to memory on returning to time
            if(mode == 0){
                cli(); // Protect EEPROM Write from interrupts
 5e2:	f8 94       	cli
                eeprom_write_block ((const void*)&pwr_dwn_start_time, (void*) &pwr_dwn_start_time_eeprom, sizeof(pwr_dwn_start_time_eeprom));
 5e4:	8a e1       	ldi	r24, 0x1A	; 26
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	4a e0       	ldi	r20, 0x0A	; 10
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	fe d1       	rcall	.+1020   	; 0x9ee <__eewr_block_m48>
                eeprom_write_block ((const void*)&pwr_dwn_stop_time, (void*) &pwr_dwn_stop_time_eeprom, sizeof(pwr_dwn_stop_time_eeprom));
 5f2:	80 e1       	ldi	r24, 0x10	; 16
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	6a e0       	ldi	r22, 0x0A	; 10
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	4a e0       	ldi	r20, 0x0A	; 10
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	f7 d1       	rcall	.+1006   	; 0x9ee <__eewr_block_m48>
                sei(); // Renable interrupts
 600:	78 94       	sei
 602:	ff 24       	eor	r15, r15
 604:	11 e0       	ldi	r17, 0x01	; 1
 606:	91 cf       	rjmp	.-222    	; 0x52a <main+0x8e>

	while(TRUE){
        // get_time();
        if(power_en == FALSE){
            // Turn the dispaly back on with user override of any button press
            if(chk_button_momt(0) || chk_button_momt(1) || chk_button_momt(2)){
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	42 dd       	rcall	.-1404   	; 0x90 <chk_button_momt>
 60c:	88 23       	and	r24, r24
 60e:	09 f0       	breq	.+2      	; 0x612 <main+0x176>
 610:	87 cf       	rjmp	.-242    	; 0x520 <main+0x84>
                power_en = TRUE;
                user_override = TRUE;
                nixie_tube_supply(power_en);
            }
            else if((clock_time.pm_am_n == pwr_dwn_stop_time.pm_am_n) && (clock_time.hours == pwr_dwn_stop_time.hours) && (clock_time.minutes  == pwr_dwn_stop_time.minutes)){
 612:	90 91 2d 01 	lds	r25, 0x012D
 616:	80 91 19 01 	lds	r24, 0x0119
 61a:	98 17       	cp	r25, r24
 61c:	09 f0       	breq	.+2      	; 0x620 <main+0x184>
 61e:	85 cf       	rjmp	.-246    	; 0x52a <main+0x8e>
 620:	90 91 2a 01 	lds	r25, 0x012A
 624:	80 91 16 01 	lds	r24, 0x0116
 628:	98 17       	cp	r25, r24
 62a:	09 f0       	breq	.+2      	; 0x62e <main+0x192>
 62c:	7e cf       	rjmp	.-260    	; 0x52a <main+0x8e>
 62e:	90 91 27 01 	lds	r25, 0x0127
 632:	80 91 13 01 	lds	r24, 0x0113
 636:	98 17       	cp	r25, r24
 638:	09 f0       	breq	.+2      	; 0x63c <main+0x1a0>
 63a:	77 cf       	rjmp	.-274    	; 0x52a <main+0x8e>
                // Restore power at user selected time
                power_en = TRUE;
                user_override = FALSE;
                nixie_tube_supply(power_en);
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	17 d1       	rcall	.+558    	; 0x86e <nixie_tube_supply>
 640:	11 e0       	ldi	r17, 0x01	; 1
 642:	ee 24       	eor	r14, r14
 644:	72 cf       	rjmp	.-284    	; 0x52a <main+0x8e>
            }
        }
        else if(chk_button_hold(0) && chk_button_hold(1)){
            // Reset all times to zero
            init_time(&pwr_dwn_stop_time);
 646:	80 e1       	ldi	r24, 0x10	; 16
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	7c dd       	rcall	.-1288   	; 0x144 <init_time>
            init_time(&pwr_dwn_start_time);
 64c:	8a e1       	ldi	r24, 0x1A	; 26
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	79 dd       	rcall	.-1294   	; 0x144 <init_time>
 652:	11 e0       	ldi	r17, 0x01	; 1
 654:	6a cf       	rjmp	.-300    	; 0x52a <main+0x8e>
            if(!user_override && (clock_time.pm_am_n == pwr_dwn_start_time.pm_am_n) && (clock_time.hours == pwr_dwn_start_time.hours) && (clock_time.minutes == pwr_dwn_start_time.minutes)){
                // Turn off display at user indicated time (assuming there is a delta in time)
                if((pwr_dwn_stop_time.pm_am_n != pwr_dwn_start_time.pm_am_n) || (pwr_dwn_stop_time.hours != pwr_dwn_start_time.hours) || (pwr_dwn_stop_time.minutes  != pwr_dwn_start_time.minutes)){
                    power_en = FALSE;
                    user_override = FALSE;
                    nixie_tube_supply(power_en);
 656:	90 91 2d 01 	lds	r25, 0x012D
 65a:	a4 cf       	rjmp	.-184    	; 0x5a4 <main+0x108>
                eeprom_write_block ((const void*)&pwr_dwn_stop_time, (void*) &pwr_dwn_stop_time_eeprom, sizeof(pwr_dwn_stop_time_eeprom));
                sei(); // Renable interrupts
            }            
        }
        else if(mode == 1){
            get_time_change(&clock_time, 255);
 65c:	84 e2       	ldi	r24, 0x24	; 36
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	6f ef       	ldi	r22, 0xFF	; 255
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	65 de       	rcall	.-822    	; 0x330 <get_time_change>
            write_minutes(); 
 666:	26 de       	rcall	.-948    	; 0x2b4 <write_minutes>
            write_hours();
 668:	37 de       	rcall	.-914    	; 0x2d8 <write_hours>
 66a:	11 e0       	ldi	r17, 0x01	; 1
 66c:	5e cf       	rjmp	.-324    	; 0x52a <main+0x8e>
        }
        else if((clock_time.pm_am_n == 0) && (clock_time.hours == 3) && (clock_time.minutes < 30)){
            cathode_poisin_prevention();
        }
        else if(chk_button_hold(0)){
            set_tubes(clock_time.seconds_ones, clock_time.seconds_tens, clock_time.minutes_ones, clock_time.minutes_tens , TRUE);
 66e:	80 91 25 01 	lds	r24, 0x0125
 672:	60 91 26 01 	lds	r22, 0x0126
 676:	40 91 28 01 	lds	r20, 0x0128
 67a:	20 91 29 01 	lds	r18, 0x0129
 67e:	01 e0       	ldi	r16, 0x01	; 1
 680:	36 d1       	rcall	.+620    	; 0x8ee <set_tubes>
 682:	11 e0       	ldi	r17, 0x01	; 1
 684:	52 cf       	rjmp	.-348    	; 0x52a <main+0x8e>
            get_time_change(&clock_time, 255);
            write_minutes(); 
            write_hours();
        }
        else if(mode == 2){
            get_time_change(&pwr_dwn_start_time, 511);
 686:	8a e1       	ldi	r24, 0x1A	; 26
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	6f ef       	ldi	r22, 0xFF	; 255
 68c:	71 e0       	ldi	r23, 0x01	; 1
 68e:	50 de       	rcall	.-864    	; 0x330 <get_time_change>
 690:	11 e0       	ldi	r17, 0x01	; 1
 692:	4b cf       	rjmp	.-362    	; 0x52a <main+0x8e>
        }
        else if(mode == 3){
            get_time_change(&pwr_dwn_stop_time, 1023);
        }
        else if((clock_time.pm_am_n == 0) && (clock_time.hours == 3) && (clock_time.minutes < 30)){
 694:	80 91 27 01 	lds	r24, 0x0127
 698:	8e 31       	cpi	r24, 0x1E	; 30
 69a:	08 f0       	brcs	.+2      	; 0x69e <main+0x202>
 69c:	74 cf       	rjmp	.-280    	; 0x586 <main+0xea>
            cathode_poisin_prevention();
 69e:	9a de       	rcall	.-716    	; 0x3d4 <cathode_poisin_prevention>
 6a0:	11 e0       	ldi	r17, 0x01	; 1
 6a2:	43 cf       	rjmp	.-378    	; 0x52a <main+0x8e>
        }
        else if(mode == 2){
            get_time_change(&pwr_dwn_start_time, 511);
        }
        else if(mode == 3){
            get_time_change(&pwr_dwn_stop_time, 1023);
 6a4:	80 e1       	ldi	r24, 0x10	; 16
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	6f ef       	ldi	r22, 0xFF	; 255
 6aa:	73 e0       	ldi	r23, 0x03	; 3
 6ac:	41 de       	rcall	.-894    	; 0x330 <get_time_change>
 6ae:	11 e0       	ldi	r17, 0x01	; 1
 6b0:	3c cf       	rjmp	.-392    	; 0x52a <main+0x8e>
        }
        else if(chk_button_hold(0)){
            set_tubes(clock_time.seconds_ones, clock_time.seconds_tens, clock_time.minutes_ones, clock_time.minutes_tens , TRUE);
        }
        else{
            if(!user_override && (clock_time.pm_am_n == pwr_dwn_start_time.pm_am_n) && (clock_time.hours == pwr_dwn_start_time.hours) && (clock_time.minutes == pwr_dwn_start_time.minutes)){
 6b2:	20 91 2a 01 	lds	r18, 0x012A
 6b6:	80 91 20 01 	lds	r24, 0x0120
 6ba:	28 17       	cp	r18, r24
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <main+0x224>
 6be:	72 cf       	rjmp	.-284    	; 0x5a4 <main+0x108>
 6c0:	30 91 27 01 	lds	r19, 0x0127
 6c4:	80 91 1d 01 	lds	r24, 0x011D
 6c8:	38 17       	cp	r19, r24
 6ca:	09 f0       	breq	.+2      	; 0x6ce <main+0x232>
 6cc:	6b cf       	rjmp	.-298    	; 0x5a4 <main+0x108>
                // Turn off display at user indicated time (assuming there is a delta in time)
                if((pwr_dwn_stop_time.pm_am_n != pwr_dwn_start_time.pm_am_n) || (pwr_dwn_stop_time.hours != pwr_dwn_start_time.hours) || (pwr_dwn_stop_time.minutes  != pwr_dwn_start_time.minutes)){
 6ce:	80 91 19 01 	lds	r24, 0x0119
 6d2:	98 17       	cp	r25, r24
 6d4:	21 f4       	brne	.+8      	; 0x6de <main+0x242>
 6d6:	80 91 16 01 	lds	r24, 0x0116
 6da:	28 17       	cp	r18, r24
 6dc:	21 f0       	breq	.+8      	; 0x6e6 <main+0x24a>
                    power_en = FALSE;
                    user_override = FALSE;
                    nixie_tube_supply(power_en);
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	c6 d0       	rcall	.+396    	; 0x86e <nixie_tube_supply>
 6e2:	10 e0       	ldi	r17, 0x00	; 0
 6e4:	64 cf       	rjmp	.-312    	; 0x5ae <main+0x112>
            set_tubes(clock_time.seconds_ones, clock_time.seconds_tens, clock_time.minutes_ones, clock_time.minutes_tens , TRUE);
        }
        else{
            if(!user_override && (clock_time.pm_am_n == pwr_dwn_start_time.pm_am_n) && (clock_time.hours == pwr_dwn_start_time.hours) && (clock_time.minutes == pwr_dwn_start_time.minutes)){
                // Turn off display at user indicated time (assuming there is a delta in time)
                if((pwr_dwn_stop_time.pm_am_n != pwr_dwn_start_time.pm_am_n) || (pwr_dwn_stop_time.hours != pwr_dwn_start_time.hours) || (pwr_dwn_stop_time.minutes  != pwr_dwn_start_time.minutes)){
 6e6:	80 91 13 01 	lds	r24, 0x0113
 6ea:	38 17       	cp	r19, r24
 6ec:	c1 f7       	brne	.-16     	; 0x6de <main+0x242>
 6ee:	5e cf       	rjmp	.-324    	; 0x5ac <main+0x110>

000006f0 <__vector_11>:
//*******************************************************

//*******************************************************
//			Timer 2 Interrupt
// 
ISR(TIMER1_COMPA_vect){
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
    get_time();
 712:	8a de       	rcall	.-748    	; 0x428 <get_time>
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	bf 91       	pop	r27
 71a:	af 91       	pop	r26
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	7f 91       	pop	r23
 722:	6f 91       	pop	r22
 724:	5f 91       	pop	r21
 726:	4f 91       	pop	r20
 728:	3f 91       	pop	r19
 72a:	2f 91       	pop	r18
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <twi_init>:
#define WRITE_RTC 0b11011110

void twi_init(void)
{
    //set SCL to 200kHz
    TWSR = 0x00;
 736:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = 0x0C;
 73a:	8c e0       	ldi	r24, 0x0C	; 12
 73c:	80 93 b8 00 	sts	0x00B8, r24
    //enable TWI
    TWCR = (1<<TWEN);
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	80 93 bc 00 	sts	0x00BC, r24
}
 746:	08 95       	ret

00000748 <twi_start>:

// send a start signal
void twi_start(void)
{
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 748:	84 ea       	ldi	r24, 0xA4	; 164
 74a:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 74e:	80 91 bc 00 	lds	r24, 0x00BC
 752:	87 ff       	sbrs	r24, 7
 754:	fc cf       	rjmp	.-8      	; 0x74e <twi_start+0x6>
}
 756:	08 95       	ret

00000758 <twi_stop>:

//send stop signal
void twi_stop(void)
{
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 758:	84 e9       	ldi	r24, 0x94	; 148
 75a:	80 93 bc 00 	sts	0x00BC, r24
}
 75e:	08 95       	ret

00000760 <twi_write>:

// write to the RTC
void twi_write(uint8_t u8data)
{
    TWDR = u8data;
 760:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
 764:	84 e8       	ldi	r24, 0x84	; 132
 766:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 76a:	80 91 bc 00 	lds	r24, 0x00BC
 76e:	87 ff       	sbrs	r24, 7
 770:	fc cf       	rjmp	.-8      	; 0x76a <twi_write+0xa>
}
 772:	08 95       	ret

00000774 <twi_read_ack>:

//read byte with ACK
uint8_t twi_read_ack(void)
{
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 774:	84 ec       	ldi	r24, 0xC4	; 196
 776:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 77a:	80 91 bc 00 	lds	r24, 0x00BC
 77e:	87 ff       	sbrs	r24, 7
 780:	fc cf       	rjmp	.-8      	; 0x77a <twi_read_ack+0x6>
    return TWDR;
 782:	80 91 bb 00 	lds	r24, 0x00BB
}
 786:	08 95       	ret

00000788 <twi_read_nack>:

//read byte with NACK
uint8_t twi_read_nack(void)
{
    TWCR = (1<<TWINT)|(1<<TWEN);
 788:	84 e8       	ldi	r24, 0x84	; 132
 78a:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 78e:	80 91 bc 00 	lds	r24, 0x00BC
 792:	87 ff       	sbrs	r24, 7
 794:	fc cf       	rjmp	.-8      	; 0x78e <twi_read_nack+0x6>
    return TWDR;
 796:	80 91 bb 00 	lds	r24, 0x00BB
}
 79a:	08 95       	ret

0000079c <write_rtc>:


/********************write_rtc*************************/
// Write a value to the RTC
//
void write_rtc(uint8_t addr, uint8_t data){
 79c:	98 2f       	mov	r25, r24
	cli(); // Prevent interrupts from breaking I2C command
 79e:	f8 94       	cli
}

// send a start signal
void twi_start(void)
{
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 7a0:	84 ea       	ldi	r24, 0xA4	; 164
 7a2:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 7a6:	80 91 bc 00 	lds	r24, 0x00BC
 7aa:	87 ff       	sbrs	r24, 7
 7ac:	fc cf       	rjmp	.-8      	; 0x7a6 <write_rtc+0xa>
}

// write to the RTC
void twi_write(uint8_t u8data)
{
    TWDR = u8data;
 7ae:	8e ed       	ldi	r24, 0xDE	; 222
 7b0:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
 7b4:	84 e8       	ldi	r24, 0x84	; 132
 7b6:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 7ba:	80 91 bc 00 	lds	r24, 0x00BC
 7be:	87 ff       	sbrs	r24, 7
 7c0:	fc cf       	rjmp	.-8      	; 0x7ba <write_rtc+0x1e>
}

// write to the RTC
void twi_write(uint8_t u8data)
{
    TWDR = u8data;
 7c2:	90 93 bb 00 	sts	0x00BB, r25
    TWCR = (1<<TWINT)|(1<<TWEN);
 7c6:	84 e8       	ldi	r24, 0x84	; 132
 7c8:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 7cc:	80 91 bc 00 	lds	r24, 0x00BC
 7d0:	87 ff       	sbrs	r24, 7
 7d2:	fc cf       	rjmp	.-8      	; 0x7cc <write_rtc+0x30>
}

// write to the RTC
void twi_write(uint8_t u8data)
{
    TWDR = u8data;
 7d4:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT)|(1<<TWEN);
 7d8:	84 e8       	ldi	r24, 0x84	; 132
 7da:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 7de:	80 91 bc 00 	lds	r24, 0x00BC
 7e2:	87 ff       	sbrs	r24, 7
 7e4:	fc cf       	rjmp	.-8      	; 0x7de <write_rtc+0x42>
	cli(); // Prevent interrupts from breaking I2C command
	twi_start();
	twi_write(WRITE_RTC); // Send command to read from address
	twi_write(addr); // Send address of part number
	twi_write(data); // Send command to read data
    sei(); // Renable interrupts
 7e6:	78 94       	sei
}
 7e8:	08 95       	ret

000007ea <read_rtc>:
/**************************************************************/

/********************read_rtc*************************/
// Read from the RTC SRAM
//
uint8_t read_rtc(uint8_t addr){
 7ea:	98 2f       	mov	r25, r24
}

// send a start signal
void twi_start(void)
{
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 7ec:	84 ea       	ldi	r24, 0xA4	; 164
 7ee:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 7f2:	80 91 bc 00 	lds	r24, 0x00BC
 7f6:	87 ff       	sbrs	r24, 7
 7f8:	fc cf       	rjmp	.-8      	; 0x7f2 <read_rtc+0x8>
}

// write to the RTC
void twi_write(uint8_t u8data)
{
    TWDR = u8data;
 7fa:	8e ed       	ldi	r24, 0xDE	; 222
 7fc:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
 800:	84 e8       	ldi	r24, 0x84	; 132
 802:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 806:	80 91 bc 00 	lds	r24, 0x00BC
 80a:	87 ff       	sbrs	r24, 7
 80c:	fc cf       	rjmp	.-8      	; 0x806 <read_rtc+0x1c>
}

// write to the RTC
void twi_write(uint8_t u8data)
{
    TWDR = u8data;
 80e:	90 93 bb 00 	sts	0x00BB, r25
    TWCR = (1<<TWINT)|(1<<TWEN);
 812:	84 e8       	ldi	r24, 0x84	; 132
 814:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 818:	80 91 bc 00 	lds	r24, 0x00BC
 81c:	87 ff       	sbrs	r24, 7
 81e:	fc cf       	rjmp	.-8      	; 0x818 <read_rtc+0x2e>
}

// send a start signal
void twi_start(void)
{
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 820:	84 ea       	ldi	r24, 0xA4	; 164
 822:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 826:	80 91 bc 00 	lds	r24, 0x00BC
 82a:	87 ff       	sbrs	r24, 7
 82c:	fc cf       	rjmp	.-8      	; 0x826 <read_rtc+0x3c>
}

// write to the RTC
void twi_write(uint8_t u8data)
{
    TWDR = u8data;
 82e:	8f ed       	ldi	r24, 0xDF	; 223
 830:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
 834:	84 e8       	ldi	r24, 0x84	; 132
 836:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 83a:	80 91 bc 00 	lds	r24, 0x00BC
 83e:	87 ff       	sbrs	r24, 7
 840:	fc cf       	rjmp	.-8      	; 0x83a <read_rtc+0x50>
}

//read byte with NACK
uint8_t twi_read_nack(void)
{
    TWCR = (1<<TWINT)|(1<<TWEN);
 842:	84 e8       	ldi	r24, 0x84	; 132
 844:	80 93 bc 00 	sts	0x00BC, r24
    while ((TWCR & (1<<TWINT)) == 0);
 848:	80 91 bc 00 	lds	r24, 0x00BC
 84c:	87 ff       	sbrs	r24, 7
 84e:	fc cf       	rjmp	.-8      	; 0x848 <read_rtc+0x5e>
    return TWDR;
 850:	80 91 bb 00 	lds	r24, 0x00BB
	twi_write(addr); // Send address of part number
	twi_start();
	twi_write(READ_RTC); // Send command to read data
	return twi_read_nack();

}
 854:	08 95       	ret

00000856 <spi_init_master>:

// Initialize SPI Master Device (without interrupt)
void spi_init_master (void)
{
    // Set MOSI, SCK, SCLR_N, OE_N, and RCLK as Output
    DDRB |= (1<<SER)|(1<<SRCLK)|(1<<SCLR_N)|(1<<OE_N)|(1<<RCLK);
 856:	84 b1       	in	r24, 0x04	; 4
 858:	8f 62       	ori	r24, 0x2F	; 47
 85a:	84 b9       	out	0x04, r24	; 4

    // Enable COL_SEL pin
    DDRB |= (1<<COL_SEL);
 85c:	27 9a       	sbi	0x04, 7	; 4

    // Enable SHTDN function
    DDRC |= (1<<EN_180V);
 85e:	3b 9a       	sbi	0x07, 3	; 7
    PORTC |= (1<<EN_180V);
 860:	43 9a       	sbi	0x08, 3	; 8
 
    // Enable SPI, Set as Master
    //Prescaler: Fosc/16, disable Interrupts
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 862:	81 e5       	ldi	r24, 0x51	; 81
 864:	8c bd       	out	0x2c, r24	; 44

    PORTB |= (1<<SCLR_N); // Disable CLR
 866:	28 9a       	sbi	0x05, 0	; 5
    PORTB |= (1<<OE_N);   // Disable output initially
 868:	29 9a       	sbi	0x05, 1	; 5

    // Disable power supply by default
    PORTC &= ~(1<<EN_180V);
 86a:	43 98       	cbi	0x08, 3	; 8
}
 86c:	08 95       	ret

0000086e <nixie_tube_supply>:

void nixie_tube_supply (uint8_t status){
    // Set power supply based on intput
    if(status == TRUE){
 86e:	81 30       	cpi	r24, 0x01	; 1
 870:	11 f0       	breq	.+4      	; 0x876 <nixie_tube_supply+0x8>
        PORTC |= (1<<EN_180V);
    }
    else{
        PORTC &= ~(1<<EN_180V);
 872:	43 98       	cbi	0x08, 3	; 8
 874:	08 95       	ret
}

void nixie_tube_supply (uint8_t status){
    // Set power supply based on intput
    if(status == TRUE){
        PORTC |= (1<<EN_180V);
 876:	43 9a       	sbi	0x08, 3	; 8
 878:	08 95       	ret

0000087a <dec_to_bin_normal>:
// 4'b1010-4'b1111 = RESERVED! DO NOT USE!
// This function is overkill, but helps keep only legal values assinged
uint8_t dec_to_bin_normal (uint8_t decimal){
    uint8_t ret_bin = 0;

    switch(decimal){
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	fc 01       	movw	r30, r24
 87e:	31 97       	sbiw	r30, 0x01	; 1
 880:	e9 30       	cpi	r30, 0x09	; 9
 882:	f1 05       	cpc	r31, r1
 884:	10 f0       	brcs	.+4      	; 0x88a <dec_to_bin_normal+0x10>
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret
 88a:	e6 5e       	subi	r30, 0xE6	; 230
 88c:	ff 4f       	sbci	r31, 0xFF	; 255
 88e:	09 94       	ijmp
        case 6 : 
            ret_bin = 0b0110;
            break;
        case 7 : 
            ret_bin = 0b0111;
            break;
 890:	88 e0       	ldi	r24, 0x08	; 8
 892:	08 95       	ret
        case 8 : 
            ret_bin = 0b1000;
            break;
 894:	89 e0       	ldi	r24, 0x09	; 9
        default:
            ret_bin = 0b0000;
    }

    return ret_bin;
}
 896:	08 95       	ret
// 4'b1010-4'b1111 = RESERVED! DO NOT USE!
// This function is overkill, but helps keep only legal values assinged
uint8_t dec_to_bin_normal (uint8_t decimal){
    uint8_t ret_bin = 0;

    switch(decimal){
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	08 95       	ret
 89c:	82 e0       	ldi	r24, 0x02	; 2
 89e:	08 95       	ret
        case 1 : 
            ret_bin = 0b0001;
            break;
        case 2 : 
            ret_bin = 0b0010;
            break;
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	08 95       	ret
        case 3 : 
            ret_bin = 0b0011;
            break;
 8a4:	84 e0       	ldi	r24, 0x04	; 4
 8a6:	08 95       	ret
        case 4 : 
            ret_bin = 0b0100;
            break;
 8a8:	85 e0       	ldi	r24, 0x05	; 5
 8aa:	08 95       	ret
        case 5 : 
            ret_bin = 0b0101;
            break;
 8ac:	86 e0       	ldi	r24, 0x06	; 6
 8ae:	08 95       	ret
        case 6 : 
            ret_bin = 0b0110;
            break;
 8b0:	87 e0       	ldi	r24, 0x07	; 7
 8b2:	08 95       	ret

000008b4 <dec_to_bin_fucked>:
// 4'b1010-4'b1111 = RESERVED! DO NOT USE!
// Nixie tube 4 has a pin swap (DOH!) -- unfuck that here
uint8_t dec_to_bin_fucked (uint8_t decimal){
    uint8_t ret_bin = 0;

    switch(decimal){
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	fc 01       	movw	r30, r24
 8b8:	31 97       	sbiw	r30, 0x01	; 1
 8ba:	e9 30       	cpi	r30, 0x09	; 9
 8bc:	f1 05       	cpc	r31, r1
 8be:	10 f0       	brcs	.+4      	; 0x8c4 <dec_to_bin_fucked+0x10>
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	08 95       	ret
 8c4:	ed 5d       	subi	r30, 0xDD	; 221
 8c6:	ff 4f       	sbci	r31, 0xFF	; 255
 8c8:	09 94       	ijmp
        case 6 : 
            ret_bin = 0b0110;
            break;
        case 7 : 
            ret_bin = 0b0111;
            break;
 8ca:	88 e0       	ldi	r24, 0x08	; 8
 8cc:	08 95       	ret
        case 8 : 
            ret_bin = 0b1000;
            break;
 8ce:	89 e0       	ldi	r24, 0x09	; 9
        default:
            ret_bin = 0b0000;
    }

    return ret_bin;
}
 8d0:	08 95       	ret
// 4'b1010-4'b1111 = RESERVED! DO NOT USE!
// Nixie tube 4 has a pin swap (DOH!) -- unfuck that here
uint8_t dec_to_bin_fucked (uint8_t decimal){
    uint8_t ret_bin = 0;

    switch(decimal){
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	08 95       	ret
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	08 95       	ret
        case 1 : 
            ret_bin = 0b0001;
            break;
        case 2 : 
            ret_bin = 0b0010;
            break;
 8da:	83 e0       	ldi	r24, 0x03	; 3
 8dc:	08 95       	ret
        case 3 : 
            ret_bin = 0b0011;
            break;
 8de:	85 e0       	ldi	r24, 0x05	; 5
 8e0:	08 95       	ret
        case 4 : 
            ret_bin = 0b0101;
            break;
 8e2:	84 e0       	ldi	r24, 0x04	; 4
 8e4:	08 95       	ret
        case 5 : 
            ret_bin = 0b0100;
            break;
 8e6:	86 e0       	ldi	r24, 0x06	; 6
 8e8:	08 95       	ret
        case 6 : 
            ret_bin = 0b0110;
            break;
 8ea:	87 e0       	ldi	r24, 0x07	; 7
 8ec:	08 95       	ret

000008ee <set_tubes>:
/********************set_nixie*************************/
// Set the different annondes/cathodes
//
//Function to send and receive data for both master and slave
void set_tubes (uint8_t nix0, uint8_t nix1, uint8_t nix2, uint8_t nix3, uint8_t colon_en)
{
 8ee:	df 92       	push	r13
 8f0:	ef 92       	push	r14
 8f2:	ff 92       	push	r15
 8f4:	0f 93       	push	r16
 8f6:	1f 93       	push	r17
 8f8:	16 2f       	mov	r17, r22
 8fa:	f4 2e       	mov	r15, r20
 8fc:	e2 2e       	mov	r14, r18
 8fe:	d0 2e       	mov	r13, r16
    uint8_t upper = 0;
    uint8_t lower = 0;

    uint8_t n0_digit = dec_to_bin_normal(nix0);
 900:	bc df       	rcall	.-136    	; 0x87a <dec_to_bin_normal>
 902:	08 2f       	mov	r16, r24
    uint8_t n1_digit = dec_to_bin_normal(nix1);
 904:	81 2f       	mov	r24, r17
 906:	b9 df       	rcall	.-142    	; 0x87a <dec_to_bin_normal>
    uint8_t n2_digit = dec_to_bin_normal(nix2);
    uint8_t n3_digit = dec_to_bin_fucked(nix3);

    PORTB &= ~(1<<RCLK); // make sure parallel clock is low
 908:	2a 98       	cbi	0x05, 2	; 5
    PORTB |= (1<<OE_N);  // Disable output initially
 90a:	29 9a       	sbi	0x05, 1	; 5

    upper =  (n1_digit<<4) | n0_digit;
 90c:	82 95       	swap	r24
 90e:	80 7f       	andi	r24, 0xF0	; 240
 910:	80 2b       	or	r24, r16
//
//Function to send and receive data for both master and slave
void write_shift_reg (uint8_t data)
{
    // Load data into the buffer
    SPDR = data;
 912:	8e bd       	out	0x2e, r24	; 46
 
    //Wait until transmission complete
    while(!(SPSR & (1<<SPIF) ));
 914:	0d b4       	in	r0, 0x2d	; 45
 916:	07 fe       	sbrs	r0, 7
 918:	fd cf       	rjmp	.-6      	; 0x914 <set_tubes+0x26>
    uint8_t upper = 0;
    uint8_t lower = 0;

    uint8_t n0_digit = dec_to_bin_normal(nix0);
    uint8_t n1_digit = dec_to_bin_normal(nix1);
    uint8_t n2_digit = dec_to_bin_normal(nix2);
 91a:	8f 2d       	mov	r24, r15
 91c:	ae df       	rcall	.-164    	; 0x87a <dec_to_bin_normal>
 91e:	18 2f       	mov	r17, r24
    uint8_t n3_digit = dec_to_bin_fucked(nix3);
 920:	8e 2d       	mov	r24, r14
 922:	c8 df       	rcall	.-112    	; 0x8b4 <dec_to_bin_fucked>

    PORTB &= ~(1<<RCLK); // make sure parallel clock is low
    PORTB |= (1<<OE_N);  // Disable output initially

    upper =  (n1_digit<<4) | n0_digit;
    lower =  (n3_digit<<4) | n2_digit;
 924:	82 95       	swap	r24
 926:	80 7f       	andi	r24, 0xF0	; 240
 928:	81 2b       	or	r24, r17
//
//Function to send and receive data for both master and slave
void write_shift_reg (uint8_t data)
{
    // Load data into the buffer
    SPDR = data;
 92a:	8e bd       	out	0x2e, r24	; 46
 
    //Wait until transmission complete
    while(!(SPSR & (1<<SPIF) ));
 92c:	0d b4       	in	r0, 0x2d	; 45
 92e:	07 fe       	sbrs	r0, 7
 930:	fd cf       	rjmp	.-6      	; 0x92c <set_tubes+0x3e>
    lower =  (n3_digit<<4) | n2_digit;

    write_shift_reg(upper);
    write_shift_reg(lower);

    PORTB |= (1<<RCLK); // create rising edge on parallel clock
 932:	2a 9a       	sbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 934:	8a e1       	ldi	r24, 0x1A	; 26
 936:	8a 95       	dec	r24
 938:	f1 f7       	brne	.-4      	; 0x936 <set_tubes+0x48>
    _delay_us(10);
    PORTB &= ~(1<<RCLK); // toggle parallel clock low
 93a:	2a 98       	cbi	0x05, 2	; 5

    PORTB &= ~(1<<OE_N); // enable output
 93c:	29 98       	cbi	0x05, 1	; 5

    // Set Colon based on input
    if(colon_en == TRUE){
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	d8 16       	cp	r13, r24
 942:	39 f0       	breq	.+14     	; 0x952 <set_tubes+0x64>
        PORTB |= (1<<COL_SEL);
    }
    else{
        PORTB &= ~(1<<COL_SEL);
 944:	2f 98       	cbi	0x05, 7	; 5
    }
}
 946:	1f 91       	pop	r17
 948:	0f 91       	pop	r16
 94a:	ff 90       	pop	r15
 94c:	ef 90       	pop	r14
 94e:	df 90       	pop	r13
 950:	08 95       	ret

    PORTB &= ~(1<<OE_N); // enable output

    // Set Colon based on input
    if(colon_en == TRUE){
        PORTB |= (1<<COL_SEL);
 952:	2f 9a       	sbi	0x05, 7	; 5
    }
    else{
        PORTB &= ~(1<<COL_SEL);
    }
}
 954:	1f 91       	pop	r17
 956:	0f 91       	pop	r16
 958:	ff 90       	pop	r15
 95a:	ef 90       	pop	r14
 95c:	df 90       	pop	r13
 95e:	08 95       	ret

00000960 <write_shift_reg>:
//
//Function to send and receive data for both master and slave
void write_shift_reg (uint8_t data)
{
    // Load data into the buffer
    SPDR = data;
 960:	8e bd       	out	0x2e, r24	; 46
 
    //Wait until transmission complete
    while(!(SPSR & (1<<SPIF) ));
 962:	0d b4       	in	r0, 0x2d	; 45
 964:	07 fe       	sbrs	r0, 7
 966:	fd cf       	rjmp	.-6      	; 0x962 <write_shift_reg+0x2>
}
 968:	08 95       	ret

0000096a <__udivmodqi4>:
 96a:	99 1b       	sub	r25, r25
 96c:	79 e0       	ldi	r23, 0x09	; 9
 96e:	04 c0       	rjmp	.+8      	; 0x978 <__udivmodqi4_ep>

00000970 <__udivmodqi4_loop>:
 970:	99 1f       	adc	r25, r25
 972:	96 17       	cp	r25, r22
 974:	08 f0       	brcs	.+2      	; 0x978 <__udivmodqi4_ep>
 976:	96 1b       	sub	r25, r22

00000978 <__udivmodqi4_ep>:
 978:	88 1f       	adc	r24, r24
 97a:	7a 95       	dec	r23
 97c:	c9 f7       	brne	.-14     	; 0x970 <__udivmodqi4_loop>
 97e:	80 95       	com	r24
 980:	08 95       	ret

00000982 <__divmodhi4>:
 982:	97 fb       	bst	r25, 7
 984:	09 2e       	mov	r0, r25
 986:	07 26       	eor	r0, r23
 988:	0a d0       	rcall	.+20     	; 0x99e <__divmodhi4_neg1>
 98a:	77 fd       	sbrc	r23, 7
 98c:	04 d0       	rcall	.+8      	; 0x996 <__divmodhi4_neg2>
 98e:	0c d0       	rcall	.+24     	; 0x9a8 <__udivmodhi4>
 990:	06 d0       	rcall	.+12     	; 0x99e <__divmodhi4_neg1>
 992:	00 20       	and	r0, r0
 994:	1a f4       	brpl	.+6      	; 0x99c <__divmodhi4_exit>

00000996 <__divmodhi4_neg2>:
 996:	70 95       	com	r23
 998:	61 95       	neg	r22
 99a:	7f 4f       	sbci	r23, 0xFF	; 255

0000099c <__divmodhi4_exit>:
 99c:	08 95       	ret

0000099e <__divmodhi4_neg1>:
 99e:	f6 f7       	brtc	.-4      	; 0x99c <__divmodhi4_exit>
 9a0:	90 95       	com	r25
 9a2:	81 95       	neg	r24
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	08 95       	ret

000009a8 <__udivmodhi4>:
 9a8:	aa 1b       	sub	r26, r26
 9aa:	bb 1b       	sub	r27, r27
 9ac:	51 e1       	ldi	r21, 0x11	; 17
 9ae:	07 c0       	rjmp	.+14     	; 0x9be <__udivmodhi4_ep>

000009b0 <__udivmodhi4_loop>:
 9b0:	aa 1f       	adc	r26, r26
 9b2:	bb 1f       	adc	r27, r27
 9b4:	a6 17       	cp	r26, r22
 9b6:	b7 07       	cpc	r27, r23
 9b8:	10 f0       	brcs	.+4      	; 0x9be <__udivmodhi4_ep>
 9ba:	a6 1b       	sub	r26, r22
 9bc:	b7 0b       	sbc	r27, r23

000009be <__udivmodhi4_ep>:
 9be:	88 1f       	adc	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	5a 95       	dec	r21
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__udivmodhi4_loop>
 9c6:	80 95       	com	r24
 9c8:	90 95       	com	r25
 9ca:	bc 01       	movw	r22, r24
 9cc:	cd 01       	movw	r24, r26
 9ce:	08 95       	ret

000009d0 <__eerd_block_m48>:
 9d0:	dc 01       	movw	r26, r24
 9d2:	86 2f       	mov	r24, r22

000009d4 <__eerd_blraw_m48>:
 9d4:	e8 2f       	mov	r30, r24
 9d6:	f9 99       	sbic	0x1f, 1	; 31
 9d8:	fe cf       	rjmp	.-4      	; 0x9d6 <__eerd_blraw_m48+0x2>
 9da:	12 bc       	out	0x22, r1	; 34
 9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__eerd_blraw_m48+0x14>
 9de:	e1 bd       	out	0x21, r30	; 33
 9e0:	f8 9a       	sbi	0x1f, 0	; 31
 9e2:	e3 95       	inc	r30
 9e4:	00 b4       	in	r0, 0x20	; 32
 9e6:	0d 92       	st	X+, r0
 9e8:	41 50       	subi	r20, 0x01	; 1
 9ea:	c8 f7       	brcc	.-14     	; 0x9de <__eerd_blraw_m48+0xa>
 9ec:	08 95       	ret

000009ee <__eewr_block_m48>:
 9ee:	dc 01       	movw	r26, r24
 9f0:	86 2f       	mov	r24, r22
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__eewr_block_m48+0xa>
 9f4:	2d 91       	ld	r18, X+
 9f6:	04 d0       	rcall	.+8      	; 0xa00 <__eewr_r18_m48>
 9f8:	41 50       	subi	r20, 0x01	; 1
 9fa:	e0 f7       	brcc	.-8      	; 0x9f4 <__eewr_block_m48+0x6>
 9fc:	08 95       	ret

000009fe <__eewr_byte_m48>:
 9fe:	26 2f       	mov	r18, r22

00000a00 <__eewr_r18_m48>:
 a00:	f9 99       	sbic	0x1f, 1	; 31
 a02:	fe cf       	rjmp	.-4      	; 0xa00 <__eewr_r18_m48>
 a04:	1f ba       	out	0x1f, r1	; 31
 a06:	12 bc       	out	0x22, r1	; 34
 a08:	81 bd       	out	0x21, r24	; 33
 a0a:	20 bd       	out	0x20, r18	; 32
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	f8 94       	cli
 a10:	fa 9a       	sbi	0x1f, 2	; 31
 a12:	f9 9a       	sbi	0x1f, 1	; 31
 a14:	0f be       	out	0x3f, r0	; 63
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	08 95       	ret

00000a1a <_exit>:
 a1a:	f8 94       	cli

00000a1c <__stop_program>:
 a1c:	ff cf       	rjmp	.-2      	; 0xa1c <__stop_program>
